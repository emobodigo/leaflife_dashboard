import { toastFactory } from '@/lib/utils/toastFactory';
import {
  Box,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  InputGroup,
  InputRightElement,
  useToast,
} from '@chakra-ui/react';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { FC, useState } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';

interface FormValues {
  username: string;
  password: string;
}
const Home: FC = () => {
  const router = useRouter();
  const toast = useToast();
  const { register, handleSubmit, formState } = useForm<FormValues>({
    mode: 'onBlur',
  });
  const { errors, isValid, isSubmitting } = formState;
  const [showPassword, setShowPassword] = useState(false);
  const registerOptions = {
    username: { required: 'Username is required' },
    password: {
      required: 'Password is required',
      minLength: {
        value: 6,
        message: 'Password must have at least 6 characters',
      },
    },
  };

  const handleSignIn: SubmitHandler<FormValues> = async (data) => {
    toast(toastFactory('Test title', 'Test Message', 'error'));
    router.push('/app');
  };

  return (
    <>
      <Head>
        <title>Archelon Engine</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex justifyContent="space-between" h="100vh" w="100vw">
          <Flex
            flexDirection="column"
            justifyContent="center"
            alignItems="center"
            pos="relative"
            w={{ base: 'full', lg: '50%' }}
            h="full"
          >
            <Heading as="h1" size="lg" noOfLines={1} color="purple.600" mb={2}>
              Welcome back
            </Heading>
            <Heading as="h2" size="xs" noOfLines={1} color="purple.600" mb={10}>
              Please enter your details
            </Heading>
            <form onSubmit={handleSubmit(handleSignIn)}>
              <FormControl w="full" isInvalid={Boolean(errors.username)}>
                <FormLabel
                  htmlFor="username"
                  color="purple.600"
                  fontWeight="semibold"
                >
                  Username
                </FormLabel>
                <Input
                  id="username"
                  type="text"
                  placeholder="Enter your Username"
                  focusBorderColor="purple.800"
                  borderColor="purple.600"
                  {...register('username', registerOptions.username)}
                  data-testid="usernameInput"
                />
                <FormErrorMessage data-testid="usernameErrorMessage">
                  {errors?.username?.message}
                </FormErrorMessage>
              </FormControl>
              <FormControl w="full" mt={4} isInvalid={Boolean(errors.password)}>
                <FormLabel
                  htmlFor="password"
                  color="purple.600"
                  fontWeight="semibold"
                >
                  Password
                </FormLabel>
                <InputGroup>
                  <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    placeholder="********"
                    focusBorderColor="purple.800"
                    borderColor="purple.600"
                    pr="4.5rem"
                    {...register('password', registerOptions.password)}
                    data-testid="passwordInput"
                  />
                  <InputRightElement w="4.5rem">
                    <Button
                      h="1.75rem"
                      size="sm"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? 'Hide' : 'Show'}
                    </Button>
                  </InputRightElement>
                </InputGroup>
                <FormErrorMessage data-testid="passwordErrorMessage">
                  {errors?.password?.message}
                </FormErrorMessage>
              </FormControl>
              <Button
                backgroundColor="purple.600"
                color="white"
                _hover={{
                  backgroundColor: 'purple.700',
                }}
                isLoading={isSubmitting}
                loadingText="Submitting"
                mt={6}
                w="full"
                isDisabled={!isValid}
                type="submit"
                data-testid="buttonSubmit"
              >
                Sign in
              </Button>
            </form>
          </Flex>
          <Box
            w={{ base: 0, lg: '50%' }}
            h="100%"
            display={{ base: 'none', md: 'block' }}
          >
            <Image
              src="/images/login-bg.png"
              width={500}
              height={500}
              alt="login-background"
              style={{ width: '100%', height: '100%', objectFit: 'cover' }}
            />
          </Box>
        </Flex>
      </main>
    </>
  );
};

export default Home;
